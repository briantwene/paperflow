# credits: https://royserg.hashnode.dev/bearboard-4-devops
# repo: https://github.com/Royserg/bear-board/tree/main

name: Release

on:
    push:
        branches:
            - "main"


# run only if its 
jobs:
    create-release:
        runs-on: ubuntu-latest
        outputs:
          latest_release_id: ${{ steps.get_latest_release_id.outputs.result }}
        steps:
            - uses: actions/checkout@v4

            - name: Node setup
              uses: actions/setup-node@v4 
              with:
                node-version-file: ".nvmrc"
                cache: "npm"
            
            - run: npm ci

            - name: Create Release Pull Request or Publish
              id: changesets
              uses: changesets/action@v1
              with:
                # this should create the github tags hopefully
                publish: npm run changeset:tag
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
            # Only continue if changesets actually published something
            - name: Get Latest Release id
              id: get_latest_release_id
              if: steps.changesets.outputs.published == 'true'
              uses: actions/github-script@v7
              with:
                script: |
                  try {
                    const response = await github.rest.repos.getLatestRelease({
                      owner: context.repo.owner,
                      repo: context.repo.repo
                    });
                    console.log(response);
                    return response.data.id;
                  } catch (error) {
                    if (error.status === 404) {
                      console.log('No releases found yet');
                      return null;
                    }
                    throw error;
                  }

                  const response = await github.rest.repos.getLatestRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                  })
                  
                  
                  return response.data.id

    
            - name: Set latest release to prerelease
              if: steps.changesets.outputs.published == 'true' && steps.get_latest_release_id.outputs.result != null
              uses: actions/github-script@v7
              env:
                release_id: ${{ steps.get_latest_release_id.outputs.result }}
              with:
                script: |
                  github.rest.repos.updateRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: process.env.release_id,
                    draft: false,
                    prerelease: true
                  })
              
    


    
