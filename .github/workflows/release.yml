name: Release

on:
  push:
    branches: [ main ]

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release-please:
    name: Create Release PR or Publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          publish: npm run changeset:tag
          commit: "chore: version packages"
          title: "chore: version packages"
          createGithubReleases: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-release:
    name: Build Tauri App
    needs: release-please
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            args: '--target aarch64-apple-darwin'
          - platform: macos-latest
            args: '--target x86_64-apple-darwin'
          - platform: ubuntu-22.04
            args: ''
          - platform: windows-latest
            args: ''
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm ci

      - name: Get changelog content (Ubuntu only)
        id: changelog
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          VERSION=$(node -p "require('./package.json').version")
          if [ -f CHANGELOG.md ]; then
            CONTENT=$(awk -v version="$VERSION" '
              /^## / {
                if ($0 ~ version) { found=1; next } else if (found) { exit }
              }
              found && !/^## / { print }
            ' CHANGELOG.md | sed '/^$/d' | head -20)
            if [ -n "$CONTENT" ]; then
              echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
              echo "$CONTENT" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "changelog_content=See the assets below to download and install this version." >> $GITHUB_OUTPUT
            fi
          else
            echo "changelog_content=See the assets below to download and install this version." >> $GITHUB_OUTPUT
          fi

      - name: Build and Release with Tauri
        uses: tauri-apps/tauri-action@v0.5.16
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: 'v__VERSION__'
          releaseName: 'PaperFlow v__VERSION__'
          releaseBody: |
            ${{ steps.changelog.outputs.changelog_content || 'See the assets below to download and install this version.' }}

            ## ðŸ“± Installation

            Download the appropriate file for your operating system:
            - **Windows**: `.msi` installer
            - **macOS**: `.dmg` file
            - **Linux**: `.AppImage` or `.deb` package

            ## ðŸ”„ Auto-Updates

            If you have PaperFlow already installed, the app will automatically check for updates and notify you when this version is available.
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: true
          updaterJsonPreferNsis: false
          updaterJsonKeepUniversal: false
          args: ${{ matrix.args }}


  sync-develop:
    name: Sync main to develop
    needs: build-and-release
    runs-on: ubuntu-latest
    if: always() && needs.build-and-release.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Sync main to develop
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: |
          git fetch origin develop || echo "Develop branch doesn't exist, skipping sync"
          if git show-ref --verify --quiet refs/remotes/origin/develop; then
            git checkout develop
            git merge origin/main --ff-only
            git push origin develop
            echo "Successfully synced main to develop"
          else
            echo "Develop branch doesn't exist, skipping sync"
          fi
