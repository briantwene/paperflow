# Streamlined Release Workflow for Tauri v2 + Changesets
# Combines semantic versioning, building, and updater management
name: Release

on:
  push:
    branches: [main]

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  # Step 1: Handle semantic versioning with Changesets
  release-please:
    name: Create Release PR or Publish
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.changesets.outputs.published }}
      publishedPackages: ${{ steps.changesets.outputs.publishedPackages }}
      hasChangesets: ${{ steps.changesets.outputs.hasChangesets }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # This makes Action fetch all Git history so Changesets can generate changelogs
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          publish: npm run changeset:tag
          commit: "chore: version packages"
          title: "chore: version packages"
          createGithubReleases: false # We'll handle this in the build job
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Step 2: Build and release Tauri app (only if there's a new version)
  build-and-release:
    name: Build Tauri App
    needs: release-please
    if: needs.release-please.outputs.hasChangesets == 'false'
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm ci

      - name: Build and Release with Tauri
        uses: tauri-apps/tauri-action@v0.5.22
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: 'v__VERSION__'
          releaseName: 'PaperFlow v__VERSION__'
          releaseBody: |
            See the assets below to download and install this version.
            
            ## What's Changed
            ${{ github.event.head_commit.message }}
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: true
          updaterJsonPreferNsis: false
          args: ${{ matrix.args }}

  # Step 3: Update the GitHub Gist for auto-updater
  update-gist:
    name: Update Updater Gist
    needs: build-and-release
    runs-on: ubuntu-latest
    if: always() && needs.build-and-release.result == 'success'
    steps:
      - name: Update updater.json gist
        uses: actions/github-script@v7
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { data: release } = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              const { name, body, published_at, assets } = release;
              
              // Find the updater JSON file in the release assets
              const updaterAsset = assets.find(asset => asset.name.includes('latest.json'));
              
              if (!updaterAsset) {
                console.log('No updater JSON found in release assets');
                return;
              }

              // Download the updater JSON
              const { data: updaterData } = await github.request(updaterAsset.browser_download_url);
              const updaterJson = JSON.parse(new TextDecoder().decode(updaterData));

              // Clean up release notes
              const cleanNotes = body.replace(/ *\([^)]*\)|#|\) */g, '').trim();
              updaterJson.notes = cleanNotes;

              // Update the gist
              await github.rest.gists.update({
                gist_id: process.env.GIST_ID,
                files: {
                  "updater.json": {
                    content: JSON.stringify(updaterJson, null, 2)
                  }
                }
              });

              console.log('Successfully updated updater gist');
            } catch (error) {
              console.error('Failed to update gist:', error);
              throw error;
            }

  # Step 4: Sync main back to develop branch (if you use gitflow)
  sync-develop:
    name: Sync main to develop
    needs: update-gist
    runs-on: ubuntu-latest
    if: always() && needs.update-gist.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Sync main to develop
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: |
          git fetch origin develop || echo "Develop branch doesn't exist, skipping sync"
          if git show-ref --verify --quiet refs/remotes/origin/develop; then
            git checkout develop
            git merge origin/main --ff-only
            git push origin develop
            echo "Successfully synced main to develop"
          else
            echo "Develop branch doesn't exist, skipping sync"
          fi
